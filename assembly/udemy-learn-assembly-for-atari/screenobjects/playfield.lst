------- FILE screenobjects.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      4  10000 ????						;;; Include required files
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE screenobjects.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE screenobjects.asm
      8  10000 ????
      9  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  10000 ????						;;; Start ROM code segment
     11  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     12  10000 ????				       seg
     13  f000					      org	$F000
     14  f000
     15  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     17  f00b
     18  f00b		       a2 80		      ldx	#$80
     19  f00d		       86 09		      stx	COLUBK
     20  f00f
     21  f00f		       a9 0f		      lda	#%1111
     22  f011		       85 08		      sta	COLUPF
     23  f013
     24  f013							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  f013							;;; set TIA registers for P0 and P1
     26  f013							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     27  f013		       a9 48		      lda	#$48
     28  f015		       85 06		      sta	COLUP0
     29  f017
     30  f017		       a9 c6		      lda	#$C6
     31  f019		       85 07		      sta	COLUP1
     32  f01b
     33  f01b		       a0 02		      ldy	#%00000010
     34  f01d		       84 0a		      sty	CTRLPF
     35  f01f
     36  f01f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     37  f01f							;;; Start a new frame by configuring VBLANK and VSYNC
     38  f01f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     39  f01f				   StartFrame
     40  f01f		       a9 02		      lda	#02
     41  f021		       85 01		      sta	VBLANK
     42  f023		       85 00		      sta	VSYNC
     43  f025
     44  f025							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     45  f025							;;; 3 lines of VSYNC
     46  f025							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     47  f025					      REPEAT	3
     48  f025		       85 02		      sta	WSYNC
     47  f025					      REPEND
     48  f027		       85 02		      sta	WSYNC
     47  f027					      REPEND
     48  f029		       85 02		      sta	WSYNC
     49  f02b					      REPEND
     50  f02b		       a9 00		      lda	#0
     51  f02d		       85 00		      sta	VSYNC
     52  f02f
     53  f02f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     54  f02f							;;; 37 lines of VBLANK
     55  f02f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     56  f02f					      REPEAT	37
     57  f02f		       85 02		      sta	WSYNC
     56  f02f					      REPEND
     57  f031		       85 02		      sta	WSYNC
     56  f031					      REPEND
     57  f033		       85 02		      sta	WSYNC
     56  f033					      REPEND
     57  f035		       85 02		      sta	WSYNC
     56  f035					      REPEND
     57  f037		       85 02		      sta	WSYNC
     56  f037					      REPEND
     57  f039		       85 02		      sta	WSYNC
     56  f039					      REPEND
     57  f03b		       85 02		      sta	WSYNC
     56  f03b					      REPEND
     57  f03d		       85 02		      sta	WSYNC
     56  f03d					      REPEND
     57  f03f		       85 02		      sta	WSYNC
     56  f03f					      REPEND
     57  f041		       85 02		      sta	WSYNC
     56  f041					      REPEND
     57  f043		       85 02		      sta	WSYNC
     56  f043					      REPEND
     57  f045		       85 02		      sta	WSYNC
     56  f045					      REPEND
     57  f047		       85 02		      sta	WSYNC
     56  f047					      REPEND
     57  f049		       85 02		      sta	WSYNC
     56  f049					      REPEND
     57  f04b		       85 02		      sta	WSYNC
     56  f04b					      REPEND
     57  f04d		       85 02		      sta	WSYNC
     56  f04d					      REPEND
     57  f04f		       85 02		      sta	WSYNC
     56  f04f					      REPEND
     57  f051		       85 02		      sta	WSYNC
     56  f051					      REPEND
     57  f053		       85 02		      sta	WSYNC
     56  f053					      REPEND
     57  f055		       85 02		      sta	WSYNC
     56  f055					      REPEND
     57  f057		       85 02		      sta	WSYNC
     56  f057					      REPEND
     57  f059		       85 02		      sta	WSYNC
     56  f059					      REPEND
     57  f05b		       85 02		      sta	WSYNC
     56  f05b					      REPEND
     57  f05d		       85 02		      sta	WSYNC
     56  f05d					      REPEND
     57  f05f		       85 02		      sta	WSYNC
     56  f05f					      REPEND
     57  f061		       85 02		      sta	WSYNC
     56  f061					      REPEND
     57  f063		       85 02		      sta	WSYNC
     56  f063					      REPEND
     57  f065		       85 02		      sta	WSYNC
     56  f065					      REPEND
     57  f067		       85 02		      sta	WSYNC
     56  f067					      REPEND
     57  f069		       85 02		      sta	WSYNC
     56  f069					      REPEND
     57  f06b		       85 02		      sta	WSYNC
     56  f06b					      REPEND
     57  f06d		       85 02		      sta	WSYNC
     56  f06d					      REPEND
     57  f06f		       85 02		      sta	WSYNC
     56  f06f					      REPEND
     57  f071		       85 02		      sta	WSYNC
     56  f071					      REPEND
     57  f073		       85 02		      sta	WSYNC
     56  f073					      REPEND
     57  f075		       85 02		      sta	WSYNC
     56  f075					      REPEND
     57  f077		       85 02		      sta	WSYNC
     58  f079					      REPEND
     59  f079
     60  f079		       a9 00		      lda	#0
     61  f07b		       85 01		      sta	VBLANK
     62  f07d
     63  f07d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     64  f07d							;;; draw the 192 visible scanlines
     65  f07d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     66  f07d				   VisibleScanlines
     67  f07d							; Draw 10 empty scanlines at the top of the frame
     68  f07d					      REPEAT	10
     69  f07d		       85 02		      sta	WSYNC
     68  f07d					      REPEND
     69  f07f		       85 02		      sta	WSYNC
     68  f07f					      REPEND
     69  f081		       85 02		      sta	WSYNC
     68  f081					      REPEND
     69  f083		       85 02		      sta	WSYNC
     68  f083					      REPEND
     69  f085		       85 02		      sta	WSYNC
     68  f085					      REPEND
     69  f087		       85 02		      sta	WSYNC
     68  f087					      REPEND
     69  f089		       85 02		      sta	WSYNC
     68  f089					      REPEND
     69  f08b		       85 02		      sta	WSYNC
     68  f08b					      REPEND
     69  f08d		       85 02		      sta	WSYNC
     68  f08d					      REPEND
     69  f08f		       85 02		      sta	WSYNC
     70  f091					      REPEND
     71  f091
     72  f091							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     73  f091							;;; display 10 scanlines for the scoreboard number
     74  f091							;;; pulls data from an array of bytes defined at `Numberbitmap`
     75  f091							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     76  f091		       a0 00		      ldy	#0
     77  f093				   ScoreboardLoop
     78  f093		       b9 f2 ff 	      lda	NumberBitmap,Y
     79  f096		       85 0e		      sta	PF1
     80  f098		       85 02		      sta	WSYNC
     81  f09a		       c8		      iny
     82  f09b		       c0 0a		      cpy	#10
     83  f09d		       d0 f4		      bne	ScoreboardLoop
     84  f09f
     85  f09f		       a9 00		      lda	#0
     86  f0a1		       85 0e		      sta	PF1
     87  f0a3
     88  f0a3							; Draw 50 scanlines between scoreboard and player
     89  f0a3					      REPEAT	50
     90  f0a3		       85 02		      sta	WSYNC
     89  f0a3					      REPEND
     90  f0a5		       85 02		      sta	WSYNC
     89  f0a5					      REPEND
     90  f0a7		       85 02		      sta	WSYNC
     89  f0a7					      REPEND
     90  f0a9		       85 02		      sta	WSYNC
     89  f0a9					      REPEND
     90  f0ab		       85 02		      sta	WSYNC
     89  f0ab					      REPEND
     90  f0ad		       85 02		      sta	WSYNC
     89  f0ad					      REPEND
     90  f0af		       85 02		      sta	WSYNC
     89  f0af					      REPEND
     90  f0b1		       85 02		      sta	WSYNC
     89  f0b1					      REPEND
     90  f0b3		       85 02		      sta	WSYNC
     89  f0b3					      REPEND
     90  f0b5		       85 02		      sta	WSYNC
     89  f0b5					      REPEND
     90  f0b7		       85 02		      sta	WSYNC
     89  f0b7					      REPEND
     90  f0b9		       85 02		      sta	WSYNC
     89  f0b9					      REPEND
     90  f0bb		       85 02		      sta	WSYNC
     89  f0bb					      REPEND
     90  f0bd		       85 02		      sta	WSYNC
     89  f0bd					      REPEND
     90  f0bf		       85 02		      sta	WSYNC
     89  f0bf					      REPEND
     90  f0c1		       85 02		      sta	WSYNC
     89  f0c1					      REPEND
     90  f0c3		       85 02		      sta	WSYNC
     89  f0c3					      REPEND
     90  f0c5		       85 02		      sta	WSYNC
     89  f0c5					      REPEND
     90  f0c7		       85 02		      sta	WSYNC
     89  f0c7					      REPEND
     90  f0c9		       85 02		      sta	WSYNC
     89  f0c9					      REPEND
     90  f0cb		       85 02		      sta	WSYNC
     89  f0cb					      REPEND
     90  f0cd		       85 02		      sta	WSYNC
     89  f0cd					      REPEND
     90  f0cf		       85 02		      sta	WSYNC
     89  f0cf					      REPEND
     90  f0d1		       85 02		      sta	WSYNC
     89  f0d1					      REPEND
     90  f0d3		       85 02		      sta	WSYNC
     89  f0d3					      REPEND
     90  f0d5		       85 02		      sta	WSYNC
     89  f0d5					      REPEND
     90  f0d7		       85 02		      sta	WSYNC
     89  f0d7					      REPEND
     90  f0d9		       85 02		      sta	WSYNC
     89  f0d9					      REPEND
     90  f0db		       85 02		      sta	WSYNC
     89  f0db					      REPEND
     90  f0dd		       85 02		      sta	WSYNC
     89  f0dd					      REPEND
     90  f0df		       85 02		      sta	WSYNC
     89  f0df					      REPEND
     90  f0e1		       85 02		      sta	WSYNC
     89  f0e1					      REPEND
     90  f0e3		       85 02		      sta	WSYNC
     89  f0e3					      REPEND
     90  f0e5		       85 02		      sta	WSYNC
     89  f0e5					      REPEND
     90  f0e7		       85 02		      sta	WSYNC
     89  f0e7					      REPEND
     90  f0e9		       85 02		      sta	WSYNC
     89  f0e9					      REPEND
     90  f0eb		       85 02		      sta	WSYNC
     89  f0eb					      REPEND
     90  f0ed		       85 02		      sta	WSYNC
     89  f0ed					      REPEND
     90  f0ef		       85 02		      sta	WSYNC
     89  f0ef					      REPEND
     90  f0f1		       85 02		      sta	WSYNC
     89  f0f1					      REPEND
     90  f0f3		       85 02		      sta	WSYNC
     89  f0f3					      REPEND
     90  f0f5		       85 02		      sta	WSYNC
     89  f0f5					      REPEND
     90  f0f7		       85 02		      sta	WSYNC
     89  f0f7					      REPEND
     90  f0f9		       85 02		      sta	WSYNC
     89  f0f9					      REPEND
     90  f0fb		       85 02		      sta	WSYNC
     89  f0fb					      REPEND
     90  f0fd		       85 02		      sta	WSYNC
     89  f0fd					      REPEND
     90  f0ff		       85 02		      sta	WSYNC
     89  f0ff					      REPEND
     90  f101		       85 02		      sta	WSYNC
     89  f101					      REPEND
     90  f103		       85 02		      sta	WSYNC
     89  f103					      REPEND
     90  f105		       85 02		      sta	WSYNC
     91  f107					      REPEND
     92  f107
     93  f107							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     94  f107							;;; display 10 scanlines for the player 0 graphics
     95  f107							;;; pulls data from an array of bytes defined at `PlayerBitmap`
     96  f107							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     97  f107		       a0 00		      ldy	#0
     98  f109				   Player0Loop
     99  f109		       b9 e8 ff 	      lda	PlayerBitmap,Y
    100  f10c		       85 1b		      sta	GRP0
    101  f10e		       85 02		      sta	WSYNC
    102  f110		       c8		      iny
    103  f111		       c0 0a		      cpy	#10
    104  f113		       d0 f4		      bne	Player0Loop
    105  f115
    106  f115		       a9 00		      lda	#0
    107  f117		       85 1b		      sta	GRP0
    108  f119
    109  f119							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    110  f119							;;; display 10 scanlines for the player 0 graphics
    111  f119							;;; pulls data from an array of bytes defined at `PlayerBitmap`
    112  f119							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    113  f119		       a0 00		      ldy	#0
    114  f11b				   Player1Loop
    115  f11b		       b9 e8 ff 	      lda	PlayerBitmap,Y
    116  f11e		       85 1c		      sta	GRP1
    117  f120		       85 02		      sta	WSYNC
    118  f122		       c8		      iny
    119  f123		       c0 0a		      cpy	#10
    120  f125		       d0 f4		      bne	Player1Loop
    121  f127
    122  f127		       a9 00		      lda	#0
    123  f129		       85 1c		      sta	GRP1
    124  f12b
    125  f12b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    126  f12b							;;; display the remaining scanlines
    127  f12b							;;; pulls data from an array of bytes defined at `PlayerBitmap`
    128  f12b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    129  f12b					      REPEAT	102
    130  f12b		       85 02		      sta	WSYNC
    129  f12b					      REPEND
    130  f12d		       85 02		      sta	WSYNC
    129  f12d					      REPEND
    130  f12f		       85 02		      sta	WSYNC
    129  f12f					      REPEND
    130  f131		       85 02		      sta	WSYNC
    129  f131					      REPEND
    130  f133		       85 02		      sta	WSYNC
    129  f133					      REPEND
    130  f135		       85 02		      sta	WSYNC
    129  f135					      REPEND
    130  f137		       85 02		      sta	WSYNC
    129  f137					      REPEND
    130  f139		       85 02		      sta	WSYNC
    129  f139					      REPEND
    130  f13b		       85 02		      sta	WSYNC
    129  f13b					      REPEND
    130  f13d		       85 02		      sta	WSYNC
    129  f13d					      REPEND
    130  f13f		       85 02		      sta	WSYNC
    129  f13f					      REPEND
    130  f141		       85 02		      sta	WSYNC
    129  f141					      REPEND
    130  f143		       85 02		      sta	WSYNC
    129  f143					      REPEND
    130  f145		       85 02		      sta	WSYNC
    129  f145					      REPEND
    130  f147		       85 02		      sta	WSYNC
    129  f147					      REPEND
    130  f149		       85 02		      sta	WSYNC
    129  f149					      REPEND
    130  f14b		       85 02		      sta	WSYNC
    129  f14b					      REPEND
    130  f14d		       85 02		      sta	WSYNC
    129  f14d					      REPEND
    130  f14f		       85 02		      sta	WSYNC
    129  f14f					      REPEND
    130  f151		       85 02		      sta	WSYNC
    129  f151					      REPEND
    130  f153		       85 02		      sta	WSYNC
    129  f153					      REPEND
    130  f155		       85 02		      sta	WSYNC
    129  f155					      REPEND
    130  f157		       85 02		      sta	WSYNC
    129  f157					      REPEND
    130  f159		       85 02		      sta	WSYNC
    129  f159					      REPEND
    130  f15b		       85 02		      sta	WSYNC
    129  f15b					      REPEND
    130  f15d		       85 02		      sta	WSYNC
    129  f15d					      REPEND
    130  f15f		       85 02		      sta	WSYNC
    129  f15f					      REPEND
    130  f161		       85 02		      sta	WSYNC
    129  f161					      REPEND
    130  f163		       85 02		      sta	WSYNC
    129  f163					      REPEND
    130  f165		       85 02		      sta	WSYNC
    129  f165					      REPEND
    130  f167		       85 02		      sta	WSYNC
    129  f167					      REPEND
    130  f169		       85 02		      sta	WSYNC
    129  f169					      REPEND
    130  f16b		       85 02		      sta	WSYNC
    129  f16b					      REPEND
    130  f16d		       85 02		      sta	WSYNC
    129  f16d					      REPEND
    130  f16f		       85 02		      sta	WSYNC
    129  f16f					      REPEND
    130  f171		       85 02		      sta	WSYNC
    129  f171					      REPEND
    130  f173		       85 02		      sta	WSYNC
    129  f173					      REPEND
    130  f175		       85 02		      sta	WSYNC
    129  f175					      REPEND
    130  f177		       85 02		      sta	WSYNC
    129  f177					      REPEND
    130  f179		       85 02		      sta	WSYNC
    129  f179					      REPEND
    130  f17b		       85 02		      sta	WSYNC
    129  f17b					      REPEND
    130  f17d		       85 02		      sta	WSYNC
    129  f17d					      REPEND
    130  f17f		       85 02		      sta	WSYNC
    129  f17f					      REPEND
    130  f181		       85 02		      sta	WSYNC
    129  f181					      REPEND
    130  f183		       85 02		      sta	WSYNC
    129  f183					      REPEND
    130  f185		       85 02		      sta	WSYNC
    129  f185					      REPEND
    130  f187		       85 02		      sta	WSYNC
    129  f187					      REPEND
    130  f189		       85 02		      sta	WSYNC
    129  f189					      REPEND
    130  f18b		       85 02		      sta	WSYNC
    129  f18b					      REPEND
    130  f18d		       85 02		      sta	WSYNC
    129  f18d					      REPEND
    130  f18f		       85 02		      sta	WSYNC
    129  f18f					      REPEND
    130  f191		       85 02		      sta	WSYNC
    129  f191					      REPEND
    130  f193		       85 02		      sta	WSYNC
    129  f193					      REPEND
    130  f195		       85 02		      sta	WSYNC
    129  f195					      REPEND
    130  f197		       85 02		      sta	WSYNC
    129  f197					      REPEND
    130  f199		       85 02		      sta	WSYNC
    129  f199					      REPEND
    130  f19b		       85 02		      sta	WSYNC
    129  f19b					      REPEND
    130  f19d		       85 02		      sta	WSYNC
    129  f19d					      REPEND
    130  f19f		       85 02		      sta	WSYNC
    129  f19f					      REPEND
    130  f1a1		       85 02		      sta	WSYNC
    129  f1a1					      REPEND
    130  f1a3		       85 02		      sta	WSYNC
    129  f1a3					      REPEND
    130  f1a5		       85 02		      sta	WSYNC
    129  f1a5					      REPEND
    130  f1a7		       85 02		      sta	WSYNC
    129  f1a7					      REPEND
    130  f1a9		       85 02		      sta	WSYNC
    129  f1a9					      REPEND
    130  f1ab		       85 02		      sta	WSYNC
    129  f1ab					      REPEND
    130  f1ad		       85 02		      sta	WSYNC
    129  f1ad					      REPEND
    130  f1af		       85 02		      sta	WSYNC
    129  f1af					      REPEND
    130  f1b1		       85 02		      sta	WSYNC
    129  f1b1					      REPEND
    130  f1b3		       85 02		      sta	WSYNC
    129  f1b3					      REPEND
    130  f1b5		       85 02		      sta	WSYNC
    129  f1b5					      REPEND
    130  f1b7		       85 02		      sta	WSYNC
    129  f1b7					      REPEND
    130  f1b9		       85 02		      sta	WSYNC
    129  f1b9					      REPEND
    130  f1bb		       85 02		      sta	WSYNC
    129  f1bb					      REPEND
    130  f1bd		       85 02		      sta	WSYNC
    129  f1bd					      REPEND
    130  f1bf		       85 02		      sta	WSYNC
    129  f1bf					      REPEND
    130  f1c1		       85 02		      sta	WSYNC
    129  f1c1					      REPEND
    130  f1c3		       85 02		      sta	WSYNC
    129  f1c3					      REPEND
    130  f1c5		       85 02		      sta	WSYNC
    129  f1c5					      REPEND
    130  f1c7		       85 02		      sta	WSYNC
    129  f1c7					      REPEND
    130  f1c9		       85 02		      sta	WSYNC
    129  f1c9					      REPEND
    130  f1cb		       85 02		      sta	WSYNC
    129  f1cb					      REPEND
    130  f1cd		       85 02		      sta	WSYNC
    129  f1cd					      REPEND
    130  f1cf		       85 02		      sta	WSYNC
    129  f1cf					      REPEND
    130  f1d1		       85 02		      sta	WSYNC
    129  f1d1					      REPEND
    130  f1d3		       85 02		      sta	WSYNC
    129  f1d3					      REPEND
    130  f1d5		       85 02		      sta	WSYNC
    129  f1d5					      REPEND
    130  f1d7		       85 02		      sta	WSYNC
    129  f1d7					      REPEND
    130  f1d9		       85 02		      sta	WSYNC
    129  f1d9					      REPEND
    130  f1db		       85 02		      sta	WSYNC
    129  f1db					      REPEND
    130  f1dd		       85 02		      sta	WSYNC
    129  f1dd					      REPEND
    130  f1df		       85 02		      sta	WSYNC
    129  f1df					      REPEND
    130  f1e1		       85 02		      sta	WSYNC
    129  f1e1					      REPEND
    130  f1e3		       85 02		      sta	WSYNC
    129  f1e3					      REPEND
    130  f1e5		       85 02		      sta	WSYNC
    129  f1e5					      REPEND
    130  f1e7		       85 02		      sta	WSYNC
    129  f1e7					      REPEND
    130  f1e9		       85 02		      sta	WSYNC
    129  f1e9					      REPEND
    130  f1eb		       85 02		      sta	WSYNC
    129  f1eb					      REPEND
    130  f1ed		       85 02		      sta	WSYNC
    129  f1ed					      REPEND
    130  f1ef		       85 02		      sta	WSYNC
    129  f1ef					      REPEND
    130  f1f1		       85 02		      sta	WSYNC
    129  f1f1					      REPEND
    130  f1f3		       85 02		      sta	WSYNC
    129  f1f3					      REPEND
    130  f1f5		       85 02		      sta	WSYNC
    131  f1f7					      REPEND
    132  f1f7
    133  f1f7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    134  f1f7							;;; 30 lines of VBLANK(overscan)
    135  f1f7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    136  f1f7					      REPEAT	30
    137  f1f7		       85 02		      sta	WSYNC
    136  f1f7					      REPEND
    137  f1f9		       85 02		      sta	WSYNC
    136  f1f9					      REPEND
    137  f1fb		       85 02		      sta	WSYNC
    136  f1fb					      REPEND
    137  f1fd		       85 02		      sta	WSYNC
    136  f1fd					      REPEND
    137  f1ff		       85 02		      sta	WSYNC
    136  f1ff					      REPEND
    137  f201		       85 02		      sta	WSYNC
    136  f201					      REPEND
    137  f203		       85 02		      sta	WSYNC
    136  f203					      REPEND
    137  f205		       85 02		      sta	WSYNC
    136  f205					      REPEND
    137  f207		       85 02		      sta	WSYNC
    136  f207					      REPEND
    137  f209		       85 02		      sta	WSYNC
    136  f209					      REPEND
    137  f20b		       85 02		      sta	WSYNC
    136  f20b					      REPEND
    137  f20d		       85 02		      sta	WSYNC
    136  f20d					      REPEND
    137  f20f		       85 02		      sta	WSYNC
    136  f20f					      REPEND
    137  f211		       85 02		      sta	WSYNC
    136  f211					      REPEND
    137  f213		       85 02		      sta	WSYNC
    136  f213					      REPEND
    137  f215		       85 02		      sta	WSYNC
    136  f215					      REPEND
    137  f217		       85 02		      sta	WSYNC
    136  f217					      REPEND
    137  f219		       85 02		      sta	WSYNC
    136  f219					      REPEND
    137  f21b		       85 02		      sta	WSYNC
    136  f21b					      REPEND
    137  f21d		       85 02		      sta	WSYNC
    136  f21d					      REPEND
    137  f21f		       85 02		      sta	WSYNC
    136  f21f					      REPEND
    137  f221		       85 02		      sta	WSYNC
    136  f221					      REPEND
    137  f223		       85 02		      sta	WSYNC
    136  f223					      REPEND
    137  f225		       85 02		      sta	WSYNC
    136  f225					      REPEND
    137  f227		       85 02		      sta	WSYNC
    136  f227					      REPEND
    137  f229		       85 02		      sta	WSYNC
    136  f229					      REPEND
    137  f22b		       85 02		      sta	WSYNC
    136  f22b					      REPEND
    137  f22d		       85 02		      sta	WSYNC
    136  f22d					      REPEND
    137  f22f		       85 02		      sta	WSYNC
    136  f22f					      REPEND
    137  f231		       85 02		      sta	WSYNC
    138  f233					      REPEND
    139  f233
    140  f233							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    141  f233							;;; loop to next frame
    142  f233							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    143  f233		       4c 1f f0 	      jmp	StartFrame
    144  f236
    145  f236							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    146  f236							;;; defines an array of bytes to draw player 0
    147  f236							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    148  ffe8					      org	$FFE8
    149  ffe8				   PlayerBitmap
    150  ffe8		       7e		      .byte.b	#%01111110
    151  ffe9		       ff		      .byte.b	#%11111111
    152  ffea		       ff		      .byte.b	#%11111111
    153  ffeb		       ff		      .byte.b	#%11111111
    154  ffec		       ff		      .byte.b	#%11111111
    155  ffed		       ff		      .byte.b	#%11111111
    156  ffee		       ff		      .byte.b	#%11111111
    157  ffef		       ff		      .byte.b	#%11111111
    158  fff0		       ff		      .byte.b	#%11111111
    159  fff1		       7e		      .byte.b	#%01111110
    160  fff2
    161  fff2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    162  fff2							;;; defines an array of bytes to draw the scoreboard
    163  fff2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    164  fff2					      org	$FFF2
    165  fff2				   NumberBitmap
    166  fff2		       0e		      .byte.b	#%00001110	; these 10 bytes draws a 2
    167  fff3		       0e		      .byte.b	#%00001110
    168  fff4		       02		      .byte.b	#%00000010
    169  fff5		       02		      .byte.b	#%00000010
    170  fff6		       0e		      .byte.b	#%00001110
    171  fff7		       0e		      .byte.b	#%00001110
    172  fff8		       08		      .byte.b	#%00001000
    173  fff9		       08		      .byte.b	#%00001000
    174  fffa		       0e		      .byte.b	#%00001110
    175  fffb		       0e		      .byte.b	#%00001110
    176  fffc
    177  fffc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    178  fffc							;;; Complete ROM
    179  fffc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    180  fffc					      org	$FFFC
    181  fffc		       00 f0		      .word.w	Reset
    182  fffe		       00 f0		      .word.w	Reset
