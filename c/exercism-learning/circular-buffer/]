#include "circular_buffer.h"
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>


circular_buffer_t* new_circular_buffer(size_t capacity) {
  circular_buffer_t* circular_buffer = malloc(sizeof(*circular_buffer));
  int* buffer = (int*) malloc(capacity * sizeof(int));

  circular_buffer->buffer = buffer;
  circular_buffer->capacity = capacity;
  circular_buffer->current_idx = -1;

  return circular_buffer;
}


int16_t read(circular_buffer_t *buffer, buffer_value_t *value) {
  if (buffer->current_idx == -1) {
    errno = ENODATA;
    return EXIT_FAILURE;
  }

  if (buffer->current_idx >= buffer->capacity-1) {
    return -1;
  }

  buffer[++current_idx] = value;

  return 0;
}

int16_t overwrite(circular_buffer_t *buffer, buffer_value_t value) {
  printf("%d, %d\n", buffer->current_idx, value);
  return 0;
}

void delete_buffer(circular_buffer_t *buffer) {
  free(buffer);
}
